---
- name: Send Metrics to OpenTelemetry Collector via gRPC
  hosts: all
  gather_facts: no
  tasks:
    - name: Install necessary Python packages
      pip:
        name:
          - opentelemetry-sdk
          - opentelemetry-proto
          - opentelemetry-exporter-otlp
          - grpc
        state: present

    - name: Send sample metric using Python script
      copy:
        dest: /tmp/send_metrics.py
        content: |
          import sys
          import grpc
          from opentelemetry.proto.metrics.v1 import metrics_pb2, metrics_pb2_grpc
          from opentelemetry.proto.common.v1 import common_pb2

          def main():
              otel_address = sys.argv[1]
              metric = metrics_pb2.ExportMetricsServiceRequest(
                  resource=common_pb2.Resource(
                      attributes=[
                          common_pb2.KeyValue(key='service', value=common_pb2.AnyValue(string_value='my_service')),
                          common_pb2.KeyValue(key='version', value=common_pb2.AnyValue(string_value='1.0'))
                      ]
                  ),
                  metrics=[
                      metrics_pb2.Metric(
                          name='cpu_usage',
                          description='CPU usage percentage',
                          unit='percent',
                          double_data_points=[
                              metrics_pb2.DoubleDataPoint(
                                  value=float(sys.argv[2]),
                                  labels={'instance_id': 'i-1234567890abcdef0'}
                              )
                          ]
                      )
                  ]
              )

              channel = grpc.insecure_channel(otel_address)
              stub = metrics_pb2_grpc.MetricsServiceStub(channel)
              response = stub.Export(metric)
              print("Response from OTel Collector:", response)

          if __name__ == "__main__":
              main()

    - name: Execute the Python script
      command: python3 /tmp/send_metrics.py "otlp:4317" "666"
      register: result

    - name: Display response from OTel Collector
      debug:
        var: result.stdout
